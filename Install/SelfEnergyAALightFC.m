(* ::Package:: *)

dir = DirectoryName[$InputFileName]; 
ImportPaths = FileNameJoin[{dir, "..", "Paths.m"}]; 
Get[ImportPaths]; 
$LoadFeynArts = $LoadPhi = False; 
Get[FeyncalcDirectory]; 
Get[FeynArtsFeynCalcToolsDirectory];
SetOptions[B1,BReduce->False];
ImportFile = FileNameJoin[{dir, "..", "BuildingBlocks", "SelfEnergies", "Usual", "SelfEnergyAALightFA.txt"}]; 
ToExpression[Import[ImportFile]]; 
p1 = p3 = k; 
export = 0; 
exportFortran = "";
exportFortran = exportFortran <> "double complex function SelfAALight(x)\n";
exportFortran = exportFortran <> " use constants\n";
exportFortran = exportFortran <> " implicit none\n";
exportFortran = exportFortran <> "#include \"looptools.h\"\n";
exportFortran = exportFortran <> " double precision, intent(in) :: x\n";
exportFortran = exportFortran <> " integer :: j\n";
exportFortran = exportFortran <> " double complex :: totalAmplitude\n";
exportFortran = exportFortran <> " double complex :: amplitudes("<>ToString[Length[SelfAA]]<>")\n\n";
exportFortranDeriv = "";
exportFortranDeriv = exportFortranDeriv <> "double complex function DSelfAALight(x)\n";
exportFortranDeriv = exportFortranDeriv <> " use constants\n";
exportFortranDeriv = exportFortranDeriv <> " implicit none\n";
exportFortranDeriv = exportFortranDeriv <> "#include \"looptools.h\"\n";
exportFortranDeriv = exportFortranDeriv <> " double precision, intent(in) :: x\n";
exportFortranDeriv = exportFortranDeriv <> " integer :: j\n";
exportFortranDeriv = exportFortranDeriv <> " double complex :: totalAmplitude\n";
exportFortranDeriv = exportFortranDeriv <> " double complex :: amplitudes("<>ToString[Length[SelfAA]]<>")\n\n";
For[i = 1, i <= Length[SelfAA], i++, 
	Print["Calculating sub-amplitude number "<>ToString[i]<>" ..."];
	tracer = (((SelfAA[[i]])/.{PropagatorDenominator[0,0]:>PropagatorDenominator[0,\[Mu]]})/.{DiracTrace -> Tr}); If[tracer == 0, exportFortran=exportFortran<>" amplitudes("<>ToString[i]<>") = 0D0"<>"\n\n"; Print["Sub-amplitude number "<>ToString[i]<>" finished."];  Continue[]; ]; If[FreeQ[tracer, l], exportFortran=exportFortran<>" amplitudes("<>ToString[i]<>") = 0D0"<>"\n\n"; Continue[]; ];
	simpler = OneLoopSimplify[tracer, l];
	oneloop = OneLoop[l, simpler]; 
    result = Simplify[PaVeReduce[oneloop /. {Pair[Momentum[k], Momentum[k]] -> x}]]; 
	export = (result/.{C0[0,x_,x_,0,0,b_]:>C0Mine[DBLE[0],DBLE[x],DBLE[x],DBLE[0],DBLE[0],DBLE[b]]}); 
	exportFortran=exportFortran<>feyncalcToFortran[export," amplitudes("<>ToString[i]<>") = "]<>"\n\n";
	resultDeriv = D[result,x];
	exportDeriv = (resultDeriv/.{C0[0,x_,x_,0,0,b_]:>C0Mine[DBLE[0],DBLE[x],DBLE[x],DBLE[0],DBLE[0],DBLE[b]]}/.{Derivative[1,0,0][B00][x_,m1_,m2_]:>DB00[DBLE[x],DBLE[m1],DBLE[m2]],Derivative[1,0,0][B11][x_,m1_,m2_]:>DB11[DBLE[x],DBLE[m1],DBLE[m2]],Derivative[0,1,0,0,0,0][C0][0,x_,x_,0,0,m_]:>DC01Mine[DBLE[0],DBLE[x],DBLE[x],DBLE[0],DBLE[0],DBLE[m]],Derivative[0,0,1,0,0,0][C0][0,x_,x_,0,0,m_]:>DC02Mine[DBLE[0],DBLE[x],DBLE[x],DBLE[0],DBLE[0],DBLE[m]]});
	exportFortranDeriv=exportFortranDeriv<>feyncalcToFortran[exportDeriv," amplitudes("<>ToString[i]<>") = "]<>"\n\n";
	Print["Sub-amplitude number "<>ToString[i]<>" finished."];   
	ClearAll[tracer, simpler, oneloop, result, resultDeriv, export, exportDeriv]; 
];
exportFortran=exportFortran<>"  totalAmplitude = (0D0,0D0)\n";
exportFortran=exportFortran<>" do j=1,"<>ToString[Length[SelfAA]]<>"\n";
exportFortran=exportFortran<>"  totalAmplitude = totalAmplitude + amplitudes(j)\n";
exportFortran=exportFortran<>" end do\n";
exportFortran=exportFortran<>" SelfAALight = totalAmplitude\n";
exportFortran=exportFortran<>"end function SelfAALight\n\n";
exportFortranDeriv=exportFortranDeriv<>"  totalAmplitude = (0D0,0D0)\n";
exportFortranDeriv=exportFortranDeriv<>" do j=1,"<>ToString[Length[SelfAA]]<>"\n";
exportFortranDeriv=exportFortranDeriv<>"  totalAmplitude = totalAmplitude + amplitudes(j)\n";
exportFortranDeriv=exportFortranDeriv<>" end do\n";
exportFortranDeriv=exportFortranDeriv<>" DSelfAALight = totalAmplitude\n";
exportFortranDeriv=exportFortranDeriv<>"end function DSelfAALight\n\n";
filename = FileNameJoin[{dir, "..", "BuildingBlocks", "SelfEnergies", "Usual", "SelfAALight.txt"}];
Export[filename, exportFortran]; 
If[FileExistsQ[StringReplace[filename,".txt"->".F90"]],DeleteFile[StringReplace[filename,".txt"->".F90"]];];
RenameFile[filename,StringReplace[filename,".txt"->".F90"]];
filenameDeriv = FileNameJoin[{dir, "..", "BuildingBlocks", "SelfEnergiesDerivatives", "DSelfAALight.txt"}];
Export[filenameDeriv, exportFortranDeriv]; 
If[FileExistsQ[StringReplace[filenameDeriv,".txt"->".F90"]],DeleteFile[StringReplace[filenameDeriv,".txt"->".F90"]];];
RenameFile[filenameDeriv,StringReplace[filenameDeriv,".txt"->".F90"]];
DeleteFile[ImportFile];
Exit[]; 
